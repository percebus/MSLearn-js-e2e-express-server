# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - main

variables:
  vmImage: ubuntu-latest
  is_branch_main: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  # This allows to run experimental features
  # Like skipping unecessary target stages
  DOCKER_BUILDKIT: 1
  DOCKER_FILE: ./Dockerfile
  DOCKER_IMAGE_NAME: js-e2e-express-server
  DOCKER_IMAGE_TAG: $(Build.BuildId)
  DOCKER_REGISTRY_NAME: JCGuerrero.azurECR.io
  DOCKER_REGISTRY_CONNECTION: ca3600b9-2bec-4f94-827d-f4b257a98804

stages:
  - stage: Verification
    jobs:
      - job: test
        displayName: Test
        pool:
          vmImage: $(vmImage)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 16.x
            displayName: setup node@16.x

          - script: npm run setup:ci --if-present
            displayName: npm setup:ci
          - script: npm ci
            displayName: npm install
          - script: ls -la node_modules
            displayName: ls node_modules

          - script: npm run lint
            displayName: npm lint
          - script: npm test
            displayName: npm test
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            displayName: Publish junit.xml
            inputs:
              testRunner: JUnit
              testResultsFiles: junit.xml
          - task: PublishCodeCoverageResults@1
            displayName: Publish covertura-coverage.xml
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: ./coverage/cobertura-coverage.xml

          # TODO merge these 2 with a good ol' bash cp
          - task: CopyFiles@2
            inputs:
              sourceFolder: "$(Build.SourcesDirectory)"
              contents: "*.tgz"
              targetFolder: "$(Build.ArtifactStagingDirectory)/npm"
            displayName: "CopyFiles *.tgz to npm/"
          - task: CopyFiles@2
            inputs:
              sourceFolder: "$(Build.SourcesDirectory)"
              contents: package.json
              targetFolder: "$(Build.ArtifactStagingDirectory)/npm"
            displayName: "CopyFiles package.json to npm/"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/npm"
              artifactName: npm
            displayName: publish

  - stage: Docker
    jobs:
      - job: docker_compose
        displayName: docker compose
        pool:
          vmImage: $(vmImage)
        steps:
          - script: docker compose build
            displayName: docker compose build

      - job: dockerfile
        # condition: and(succeeded(), eq(variables.is_branch_main, 'true')) # TODO
        pool:
          vmImage: $(vmImage)
        strategy:
          matrix:
            # XXX? redundant, both 'test' & 'release' run this
            # base:
            #   DOCKER_TARGET_STAGE: base
            test:
              DOCKER_TARGET_STAGE: test
            # XXX? redundant, 'dockerize' would run the same
            # release:
            #   DOCKER_TARGET_STAGE: release
        displayName: "docker build:"
        steps:
          - task: Docker@2
            displayName: docker build
            inputs:
              command: build
              arguments: --target $(DOCKER_TARGET_STAGE)

  - stage: Publish
    # condition: and(succeeded(), eq(variables.is_branch_main, 'true')) # TODO
    jobs:
      - job: dockerize
        displayName: Dockerize
        pool:
          vmImage: $(vmImage)
        steps:
          - task: Docker@2
            displayName: ACR Login
            inputs:
              command: login
              containerRegistry: $(DOCKER_REGISTRY_CONNECTION)
          - task: Docker@2
            displayName: docker build + push
            inputs:
              command: buildAndPush
              dockerfile: $(DOCKER_FILE)
              repository: $(DOCKER_IMAGE_NAME)
              tags: |
                latest
                $(DOCKER_IMAGE_TAG)
