trigger:
  - main

variables:
  vmImage: ubuntu-latest
  is_branch_main: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  AZ_CONNECTION: "21bba4a3-8942-41d6-bab9-f329b5dba5bd"
  # This allows to run experimental features
  # Like skipping unecessary target stages
  DOCKER_BUILDKIT: 1
  DOCKER_FILE: ./Dockerfile
  DOCKER_IMAGE_NAME: js-e2e-express-server
  DOCKER_IMAGE_TAG: $(Build.BuildId)
  DOCKER_REGISTRY_NAME: JCGuerrero.azurECR.io
  DOCKER_REGISTRY_CONNECTION: "d9fe3721-c9e6-4820-b04b-54d04033f7f4"

stages:
  - stage: Verification
    jobs:
      - job: test
        displayName: Test
        pool:
          vmImage: $(vmImage)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: 16.x
            displayName: setup node@16.x

          - script: npm run setup:ci --if-present
            displayName: npm setup:ci
          - script: npm ci
            displayName: npm install
          - script: ls -la node_modules
            displayName: ls node_modules

          - script: npm run lint
            displayName: npm lint
          - script: npm test
            displayName: npm test
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            displayName: Publish junit.xml
            inputs:
              testRunner: JUnit
              testResultsFiles: junit.xml
          - task: PublishCodeCoverageResults@1
            displayName: Publish covertura-coverage.xml
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: ./coverage/cobertura-coverage.xml

          # TODO merge these 2 with a good ol' bash cp
          - task: CopyFiles@2
            inputs:
              sourceFolder: "$(Build.SourcesDirectory)"
              contents: "*.tgz"
              targetFolder: "$(Build.ArtifactStagingDirectory)/npm"
            displayName: "CopyFiles *.tgz to npm/"
          - task: CopyFiles@2
            inputs:
              sourceFolder: "$(Build.SourcesDirectory)"
              contents: package.json
              targetFolder: "$(Build.ArtifactStagingDirectory)/npm"
            displayName: "CopyFiles package.json to npm/"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/npm"
              artifactName: npm
            displayName: publish

  - stage: Docker
    jobs:
      - job: Dockerfile
        # condition: and(succeeded(), eq(variables.is_branch_main, 'true')) # TODO? or XXX?
        pool:
          vmImage: $(vmImage)
        strategy:
          matrix:
            # base: # XXX? redundant, both 'test' & 'release' run this
            #   DOCKER_TARGET_STAGE: base
            test:
              DOCKER_TARGET_STAGE: test
            # release: # XXX? redundant, 'docker compose' & 'dockerize' would run the same
            #   DOCKER_TARGET_STAGE: release
        displayName: "docker build:"
        steps:
          - task: Docker@2
            displayName: docker build
            inputs:
              command: build
              arguments: --target $(DOCKER_TARGET_STAGE)

      - job: docker_compose
        dependsOn: Dockerfile
        displayName: docker compose
        pool:
          vmImage: $(vmImage)
        steps:
          - script: docker compose build
            displayName: docker compose build


  - stage: Publish
    # condition: and(succeeded(), eq(variables.is_branch_main, 'true')) # TODO
    jobs:
      - job: dockerize
        displayName: Dockerize
        pool:
          vmImage: $(vmImage)
        steps:
          - task: Docker@2
            displayName: ACR Login
            inputs:
              command: login
              containerRegistry: $(DOCKER_REGISTRY_CONNECTION)
          - task: Docker@2
            displayName: docker build + push
            inputs:
              command: buildAndPush
              dockerfile: $(DOCKER_FILE)
              repository: $(DOCKER_IMAGE_NAME)
              tags: |
                latest
                $(DOCKER_IMAGE_TAG)

  - stage: Deploy
    # condition: and(succeeded(), eq(variables.is_branch_main, 'true')) # TODO
    jobs:
      - job: AzureWebAppContainer
        displayName: Azure Web App Container
        steps:
          - task: AzureWebAppContainer@1
            displayName: "Azure Web App on Container Deploy"
            inputs:
              azureSubscription: $(AZ_CONNECTION)
              # appName: JCGuerrero-$(DOCKER_IMG_NAME) # TODO
              appName: JCGuerrero-js-e2e-express-server # XXX
              imageName: $(DOCKER_REGISTRY_NAME)/$(DOCKER_IMG_NAME):$(DOCKER_IMG_TAG)
